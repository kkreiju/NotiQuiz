import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.Timer;

public class Quiz extends javax.swing.JFrame implements ActionListener {
    Data d = new Data();
    AfterQuiz aq = new AfterQuiz();
    SoundEffects sfx = new SoundEffects();
    boolean darkmode;
    boolean renderA;
    boolean renderB;
    boolean renderC;
    boolean renderD;
    boolean disableChoices = false;
    boolean answering = true;
    ArrayList<Integer> randomIndex = new ArrayList<Integer>();
    Timer timer = new Timer(1000, this);
    int turn = 0;
    int time = 15;
    /**
     * Creates new form GUI
     */
    public Quiz() {
        d.renderData();
        initComponents();
        timerLabel.setVisible(false);
        this.setIconImage(new ImageIcon(getClass().getResource("/icon.png")).getImage());
        if(d.data.get(0).equals("false")){
            darkmode = true;
        }
        else{
            darkmode = false;
        }
        modeRender();
        d.renderGivenQuestions();
        shuffleQuestions();
        aq.timer.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        backButton = new javax.swing.JLabel();
        topIcon = new javax.swing.JLabel();
        question = new javax.swing.JLabel();
        timerLabel = new javax.swing.JLabel();
        choiceD = new javax.swing.JLabel();
        choiceC = new javax.swing.JLabel();
        choiceB = new javax.swing.JLabel();
        choiceA = new javax.swing.JLabel();
        mode = new javax.swing.JLabel();
        dOverlay = new javax.swing.JLabel();
        cOverlay = new javax.swing.JLabel();
        bOverlay = new javax.swing.JLabel();
        aOverlay = new javax.swing.JLabel();
        choices = new javax.swing.JLabel();
        background = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("NotiQuiz");
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        backButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/backW.png"))); // NOI18N
        backButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                backButtonMouseClicked(evt);
            }
        });
        getContentPane().add(backButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(1220, 790, -1, -1));

        topIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/quiz.png"))); // NOI18N
        getContentPane().add(topIcon, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        question.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 36)); // NOI18N
        question.setForeground(new java.awt.Color(0, 0, 0));
        question.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        question.setText("Question");
        getContentPane().add(question, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 150, 1560, 120));

        timerLabel.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 36)); // NOI18N
        timerLabel.setText("5");
        getContentPane().add(timerLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 820, -1, -1));

        choiceD.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 24)); // NOI18N
        choiceD.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        choiceD.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                choiceDMouseClicked(evt);
            }
        });
        getContentPane().add(choiceD, new org.netbeans.lib.awtextra.AbsoluteConstraints(1200, 390, 370, 250));

        choiceC.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 24)); // NOI18N
        choiceC.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        choiceC.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                choiceCMouseClicked(evt);
            }
        });
        getContentPane().add(choiceC, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 390, 370, 250));

        choiceB.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 24)); // NOI18N
        choiceB.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        choiceB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                choiceBMouseClicked(evt);
            }
        });
        getContentPane().add(choiceB, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 390, 380, 250));

        choiceA.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 24)); // NOI18N
        choiceA.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        choiceA.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                choiceAMouseClicked(evt);
            }
        });
        getContentPane().add(choiceA, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 390, 370, 250));

        mode.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lightmode.png"))); // NOI18N
        mode.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                modeMouseClicked(evt);
            }
        });
        getContentPane().add(mode, new org.netbeans.lib.awtextra.AbsoluteConstraints(1460, 10, -1, 60));
        getContentPane().add(dOverlay, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));
        getContentPane().add(cOverlay, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));
        getContentPane().add(bOverlay, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));
        getContentPane().add(aOverlay, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        choices.setIcon(new javax.swing.ImageIcon(getClass().getResource("/choices.png"))); // NOI18N
        getContentPane().add(choices, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/whitebackground.png"))); // NOI18N
        getContentPane().add(background, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void modeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_modeMouseClicked
        modeRender();
        sfx.playTrack("click.wav");
    }//GEN-LAST:event_modeMouseClicked

    private void backButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backButtonMouseClicked
        Menu m = new Menu();
        m.setLocationRelativeTo(null);
        m.setResizable(false);
        m.setVisible(true);
        dispose();
        sfx.playTrack("click.wav");
        timer.stop();
        time = 15;
    }//GEN-LAST:event_backButtonMouseClicked

    private void choiceAMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_choiceAMouseClicked
        if(!disableChoices){
            answerVerifier("a");
        }
    }//GEN-LAST:event_choiceAMouseClicked

    private void choiceBMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_choiceBMouseClicked
        if(!disableChoices){
            answerVerifier("b");
        }
    }//GEN-LAST:event_choiceBMouseClicked

    private void choiceCMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_choiceCMouseClicked
        if(!disableChoices){
            answerVerifier("c");
        }
    }//GEN-LAST:event_choiceCMouseClicked

    private void choiceDMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_choiceDMouseClicked
        if(!disableChoices){
            answerVerifier("d");
        }
    }//GEN-LAST:event_choiceDMouseClicked

    private void answerVerifier(String choice){
        disableChoices = true;
        if(choice.equals(d.correctAnswer.get(randomIndex.get(turn)))){
            if(answering){
                sfx.playTrack("correct.wav");
            }
            else{
                sfx.playTrack("incorrect.wav");
            }
            
            if(choice == "a"){
                revealAnswers("green", "gray", "gray", "gray");
                renderA = true;
            }
            else if(choice == "b"){
                revealAnswers("gray", "green", "gray", "gray");
                renderB = true;
            }
            else if(choice == "c"){
                revealAnswers("gray", "gray", "green", "gray");
                renderC = true;
            }
            else{
                revealAnswers("gray", "gray", "gray", "green");
                renderD = true;
            }
            aq.correctCount++;
        }
        else{
            sfx.playTrack("incorrect.wav");
           if(choice == "a"){
                aOverlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/choices/redA.png")));
                renderA = true;
            }
            else if(choice == "b"){
                bOverlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/choices/redB.png")));
                renderB = true;
            }
            else if(choice == "c"){
                cOverlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/choices/redC.png")));
                renderC = true;
            }
            else{
                dOverlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/choices/redD.png")));
                renderD = true;
            }
           
           if(d.correctAnswer.get(randomIndex.get(turn)).equals("a")){
               aOverlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/choices/greenA.png")));
               renderA = true;
           }
           else if(d.correctAnswer.get(randomIndex.get(turn)).equals("b")){
               bOverlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/choices/greenB.png")));
               renderB = true;
           }
           else if(d.correctAnswer.get(randomIndex.get(turn)).equals("c")){
               cOverlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/choices/greenC.png")));
               renderC = true;
           }
           else if(d.correctAnswer.get(randomIndex.get(turn)).equals("d")) {
               dOverlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/choices/greenD.png")));
               renderD = true;
           }
        }
        grayRender(renderA, renderB, renderC, renderD);
        answering = false;
        timerRender();
        time = 5;
    }
    
    private void revealAnswers(String a, String b, String c, String d){
        if(a == "green"){
            aOverlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/choices/greenA.png")));
            renderA = true;
        }
        else{
            aOverlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/choices/grayA.png")));
        }
        if(b == "green"){
            bOverlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/choices/greenB.png")));
            renderB = true;
        }
        else{
            bOverlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/choices/grayB.png")));
        }
        if(c == "green"){
            cOverlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/choices/greenC.png")));
            renderC = true;
        }
        else{
            cOverlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/choices/grayC.png")));
        }
        if(d == "green"){
            dOverlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/choices/greenD.png")));
            renderD = true;
        }
        else{
            dOverlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/choices/grayD.png")));
        }
    }
    
    private void grayRender(boolean a, boolean b, boolean c, boolean d){
        if(!a){
            aOverlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/choices/grayA.png")));
        }
        if(!b){
            bOverlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/choices/grayB.png")));
        }
        if(!c){
            cOverlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/choices/grayC.png")));
        }
        if(!d){
            dOverlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/choices/grayD.png")));
        }
    }
            
    private void shuffleQuestions(){
        int maxQues = d.questions.size();
        boolean isRepeated = false;
        boolean randomNumRepeated = false;
        int maxNum = maxQues - 1;
        int minNum = 0;
        int limit = 0;
        int randomNum = (int) (Math.random() * (maxNum - minNum + 1)) + minNum;
        while (randomIndex.size() != maxQues) {
            if (!randomNumRepeated) {
                randomNum = (int) (Math.random() * (maxNum - minNum + 1)) + minNum;
                randomNumRepeated = true;
            }
            if (limit < randomIndex.size()) {
                if (randomNum == randomIndex.get(limit)) {
                    isRepeated = true;
                    limit = maxNum;
                } else {
                    isRepeated = false;
                }
            }
            if (!isRepeated && limit == maxNum) {
                randomIndex.add(randomNum);
                randomNumRepeated = false;
            }
            limit++;
            if (limit == maxQues) {
                limit = 0;
                randomNumRepeated = false;
            }
        }
        startQuestions();
    }
    
    private void startQuestions(){
        timerRender();
        question.setText("<html><div style='text-align: center;'>" + d.questions.get(randomIndex.get(turn)) + "</div></html>");
        choiceA.setText("<html><div style='text-align: center;'>" + d.a.get(randomIndex.get(turn)) + "</div></html>");
        choiceB.setText("<html><div style='text-align: center;'>" + d.b.get(randomIndex.get(turn)) + "</div></html>");
        choiceC.setText("<html><div style='text-align: center;'>" + d.c.get(randomIndex.get(turn)) + "</div></html>");
        choiceD.setText("<html><div style='text-align: center;'>" + d.d.get(randomIndex.get(turn)) + "</div></html>");
    }
    
    private void modeRender(){
        if(darkmode){
            darkmode = false;
            background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/whitebackground.png")));
            mode.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lightmode.png")));
            backButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/backW.png")));
            question.setForeground(new java.awt.Color(0, 0, 0));
            timerLabel.setForeground(new java.awt.Color(0, 0, 0));
            d.data.set(0 , "false");
            d.saveData();
        }
        else{
            darkmode = true;
            background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/blackbackground.png")));
            mode.setIcon(new javax.swing.ImageIcon(getClass().getResource("/darkmode.png")));
            backButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/backB.png")));
            question.setForeground(new java.awt.Color(255,255, 255));
            timerLabel.setForeground(new java.awt.Color(255,255, 255));
            d.data.set(0 , "true");
            d.saveData();
        }
    }
    
    private void timerRender(){
        timer.restart();
    }
    
    private void turnChecker(){
        if(turn != d.questions.size() - 1){
            turn++;
            startQuestions();
        }
        else{
            aq.timer.stop();
            aq.summary();
            disableChoices = true;
            d.saveData();
            aq.setLocationRelativeTo(null);
            aq.setResizable(false);
            aq.setVisible(true);
            dispose();
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Start.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Start.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Start.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Start.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Start().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel aOverlay;
    private javax.swing.JLabel bOverlay;
    private javax.swing.JLabel backButton;
    private javax.swing.JLabel background;
    private javax.swing.JLabel cOverlay;
    private javax.swing.JLabel choiceA;
    private javax.swing.JLabel choiceB;
    private javax.swing.JLabel choiceC;
    private javax.swing.JLabel choiceD;
    private javax.swing.JLabel choices;
    private javax.swing.JLabel dOverlay;
    private javax.swing.JLabel mode;
    private javax.swing.JLabel question;
    private javax.swing.JLabel timerLabel;
    private javax.swing.JLabel topIcon;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent e) {
        if(answering){
            timerLabel.setVisible(true);
            timerLabel.setText("" + time);
            if(time == 0){
                timer.stop();
                timerLabel.setVisible(false);
                answering = false;
                disableChoices = true;
                String choice;
                if(d.correctAnswer.get(randomIndex.get(turn)).equals("a")){
                    choice = "a";
                }
                else if(d.correctAnswer.get(randomIndex.get(turn)).equals("b")){
                    choice = "b";
                }
                else if(d.correctAnswer.get(randomIndex.get(turn)).equals("c")){
                    choice = "c";
                }
                else{
                    choice = "d";
                }
                answerVerifier(choice);
                timerRender();
                aq.correctCount--; //kay mo 100% accuracy if pasagdan
                time = 6;
            }
        }
        else{
            timerLabel.setVisible(true);
            timerLabel.setText("" + time);
            if(time == 0){
                timer.stop();
                time = 16;
                answering = true;
                timerLabel.setVisible(false);
                disableChoices = false;
                aOverlay.setIcon(null);
                bOverlay.setIcon(null);
                cOverlay.setIcon(null);
                dOverlay.setIcon(null); 
                renderA = false;
                renderB = false;
                renderC = false;
                renderD = false;
                turnChecker();
            }
        }
        time--;
    }
}
